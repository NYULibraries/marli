docker-defaults: &docker-defaults
  docker:
    - image: cimg/base:2021.07
      environment:
        - IMAGE_NAME=marli
        - HERMES_DEPLOYMENT=marli-unicorn
  working_directory: ~/app
      
version: 2.1
commands:
  build_docker: 
    steps:
      - run:
          name: Build Docker
          command: |
            export BRANCH_NO_SLASH=${CIRCLE_BRANCH//\//_}
            docker-compose build
            docker-compose -f docker-compose.build.yml build
  test:
    steps:
      - run:
          name: Run tests
          command: |
            docker-compose run test
  docker_pull:
    steps:
      - run:
          name: Pull docker images
          command: |
            ./script/pull_docker.sh
  docker_push:
    steps:
      - run:
          name: Pull docker images
          command: |
            ./script/push_docker.sh
orbs:
  nyulibraries:
    commands:
      docker_auth:
        parameters:
          host:
            default: 'quay.io'
            description: 'Provide docker host'
            type: string
          username:
            description: 'Provide docker username'
            type: string
          password: 
            description: 'Provide docker password'
            type: string
        steps:
          - run:
              name: Authenticate Docker 
              command: |
                docker login -u "<<parameters.username>>" --password "<<parameters.password>>" <<parameters.host>>
      hermes_setup:
        parameters:
          host:
            description: 'Point to an instance of the Hermes host server'
            type: string
          secret:
            description: 'Supply the Hermes host secret'
            type: string
          tag:
            description: 'Image tag for deployment'
            type: string
          deployment:
            description: 'Kubernetes deployment name'
            type: string
        steps:
          - run: 
              name: Export Hermes dev env vars
              command: |
                echo 'export HERMES_HOST=<<parameters.host>>' >> $BASH_ENV
                echo 'export HERMES_SECRET=<<parameters.secret>>' >> $BASH_ENV
                echo 'export TAG=<<parameters.tag>>' >> $BASH_ENV
                echo 'export HERMES_DEPLOYMENT=<<parameters.deployment>>' >> $BASH_ENV
      hermes_set_image:
        parameters:
          client_tag:
            default: 'master'
            description: Pick a specific hermesclient image tag, defaults to master
            type: string
          client_image:
            default: 'quay.io/nyulibraries/hermesclient'
            description: Point to the hermesclient image
            type: string
        steps:
          - run:
              name: "Set new image"
              command: |
                docker run -e HERMES_HOST -e HERMES_SECRET <<parameters.client_image>>:<<parameters.client_tag>> setImage -deployment=${HERMES_DEPLOYMENT} -tag=${TAG}
      hermes_rollout_status:
        parameters:
          client_tag:
            default: 'master'
            description: Pick a specific hermesclient image tag, defaults to master
            type: string
          client_image:
            default: 'quay.io/nyulibraries/hermesclient'
            description: Point to the hermesclient image
            type: string
        steps:
          - run: 
              name: "Get rollout status"
              command: |
                docker run -e HERMES_HOST -e HERMES_SECRET <<parameters.client_image>>:<<parameters.client_tag>> rolloutStatus -deployment=${HERMES_DEPLOYMENT}
      clear_old_builds:
        parameters:
          s3_bucket:
            description: S3 Bucket containing lambda code
            type: string
          lambda_fn:
            description: Name of Lambda function
            type: string
          keep_builds_num:
            default: 3
            type: integer
            description: Number of builds to keep
        steps:
          - run:
              name: Install AWS-CLI
              command: |
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip awscliv2.zip
                sudo ./aws/install
          - run:
              name: "Clear old Lambda builds"
              command: |
                # Recursively list all lambda functions in bucket, sort by date, 
                # pull the latest N files, and extract just the filename into a temp file to maintain newline spacing
                aws s3 ls s3://<<parameters.s3_bucket>>/<<parameters.lambda_fn>>/ --recursive | sort | tail -n <<parameters.keep_builds_num>> | awk '{print $4}' > exclude.txt

                EXCLUDE_ARGS=""
                EXCLUDE_FILES="$(cat exclude.txt)"

                # Loop through files we want to keep and format as --exclude <filename> parameters for the AWS-CLI
                for line in $EXCLUDE_FILES
                do
                    EXCLUDE_ARGS="$EXCLUDE_ARGS--exclude $(echo $line | awk -F'/' '{printf("%s/%s"), $2, $3}') "
                done 

                # Recursively remove all lambda functions of given name, in given bucket
                # except the ones we explicitly exclude
                aws s3 rm s3://<<parameters.s3_bucket>>/<<parameters.lambda_fn>>/ --recursive $EXCLUDE_ARGS


jobs:
  hermes-deploy:
    <<: *docker-defaults
    steps:
      - setup_remote_docker
      - nyulibraries/hermes_setup:
          host: ${HERMES_HOST}
          secret: ${HERMES_SECRET}
          tag: ${CIRCLE_BRANCH//\//_}-${CIRCLE_SHA1}
          deployment: ${HERMES_DEPLOYMENT}
      - nyulibraries/docker_auth:
          username: ${QUAY_USERNAME}
          password: ${QUAY_PASSWORD}
      - nyulibraries/hermes_set_image
      - nyulibraries/hermes_rollout_status
          
  test-and-build-image:
    <<: *docker-defaults
    steps:
      - checkout
      - setup_remote_docker
      - docker_pull
      - build_docker
      - test
      - nyulibraries/docker_auth:
          username: ${QUAY_USERNAME}
          password: ${QUAY_PASSWORD}
      - docker_push

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - test-and-build-image
      - hermes-deploy:
          name: hermes-deploy-dev
          context: web-hermes-dev
          requires: 
            - test-and-build-image   
          filters:
            branches:
              ignore: master
      - hermes-deploy:
          name: hermes-deploy-prod
          context: web-hermes-prod
          requires: 
            - test-and-build-image   
          filters:
            branches:
              only: master   

