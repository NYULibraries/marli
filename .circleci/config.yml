docker-defaults: &docker-defaults
  docker:
    - image: cimg/base:2021.07
      environment:
        - IMAGE_NAME=marli
        - COMPOSE_PROJECT_NAME=marli
        - HERMES_DEPLOYMENT=marli-unicorn
  working_directory: ~/app

build_docker: &build_docker
  run:
    name: Build Docker
    command: |
      export BRANCH_NO_SLASH=${CIRCLE_BRANCH//\//_}
      docker-compose build
      docker-compose -f docker-compose.build.yml build

test: &test
  run:
    name: Test
    command: |
      docker-compose run test
      
auth_quay: &auth_quay
  run:
    name: Authenticate Quay 
    command: |
      docker login -u "$QUAY_USERNAME" --password "$QUAY_PASSWORD" quay.io

pull_docker: &pull_docker
  run:
    name: Pull Docker
    command: |
      export BRANCH_NO_SLASH=${CIRCLE_BRANCH//\//_}
      docker pull quay.io/nyulibraries/${IMAGE_NAME}:${BRANCH_NO_SLASH} || docker pull quay.io/nyulibraries/${IMAGE_NAME}:latest
      docker pull quay.io/nyulibraries/${IMAGE_NAME}_test:${BRANCH_NO_SLASH} || docker pull quay.io/nyulibraries/${IMAGE_NAME}_test:latest

push_docker: &push_docker
  run:
    name: Push Docker
    command: |
      export BRANCH_NO_SLASH=${CIRCLE_BRANCH//\//_}
      docker push quay.io/nyulibraries/${IMAGE_NAME}:latest
      docker push quay.io/nyulibraries/${IMAGE_NAME}:${BRANCH_NO_SLASH}
      docker push quay.io/nyulibraries/${IMAGE_NAME}:${BRANCH_NO_SLASH}-${CIRCLE_SHA1}
      docker push quay.io/nyulibraries/${IMAGE_NAME}_test:latest
      docker push quay.io/nyulibraries/${IMAGE_NAME}_test:${BRANCH_NO_SLASH}
      docker push quay.io/nyulibraries/${IMAGE_NAME}_test:${BRANCH_NO_SLASH}-${CIRCLE_SHA1}

# hermes_deploy: &hermes_deploy
#   run:
#     name: Deploy via Hermes
#     command: |
#       export TAG=${CIRCLE_BRANCH//\//_}-${CIRCLE_SHA1}
#       docker run -e HERMES_HOST -e HERMES_SECRET quay.io/nyulibraries/hermesclient:master setImage -deployment=$HERMES_DEPLOYMENT -tag=$TAG
#       docker run -e HERMES_HOST -e HERMES_SECRET quay.io/nyulibraries/hermesclient:master rolloutStatus -deployment=$HERMES_DEPLOYMENT

version: 2.1
orbs:
  hermes:
    executors:
      hermes:
        docker:
          - image: cimg/base:2021.07
    commands:
      export_env:
        steps:
          - setup_remote_docker
          - run: 
              name: Export Hermes dev env vars
              command: |
                echo 'export HERMES_HOST=$HERMES_HOST' >> $BASH_ENV
                echo 'export HERMES_SECRET=$HERMES_SECRET' >> $BASH_ENV
      set_image:
        steps:
          - setup_remote_docker
          - run: 
              name: "Set new image"
              command: |
                export TAG=${CIRCLE_BRANCH//\//_}-${CIRCLE_SHA1}
                docker run -e HERMES_HOST -e HERMES_SECRET quay.io/nyulibraries/hermesclient:master setImage -deployment=$HERMES_DEPLOYMENT -tag=$TAG
      rollout_status:
        steps:
          - setup_remote_docker
          - run: 
              name: "Get rollout status"
              command: |
                docker run -e HERMES_HOST -e HERMES_SECRET quay.io/nyulibraries/hermesclient:master rolloutStatus -deployment=$HERMES_DEPLOYMENT
    jobs:
      deploy:
        executor: hermes
        steps:
          - export_env
          - set_image
          - rollout_status
jobs:
  test-and-build-image:
    <<: *docker-defaults
    steps:
      - checkout
      - setup_remote_docker
      - <<: *auth_quay
      - <<: *pull_docker
      - <<: *build_docker
      - <<: *test
      - <<: *push_docker

  deploy-dev:
    <<: *docker-defaults
    steps:
      - checkout
      - setup_remote_docker
      - <<: *auth_quay
      # - <<: *hermes_deploy

  deploy-prod:
    <<: *docker-defaults
    steps:
      - checkout
      - setup_remote_docker
      - <<: *auth_quay
      - run:
          name: Export Hermes prod env vars
          command: |
            echo 'export HERMES_HOST=https://hermes.library.nyu.edu' >> $BASH_ENV
            echo 'export HERMES_SECRET=$HERMES_SECRET_PROD' >> $BASH_ENV
      # - <<: *hermes_deploy

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - test-and-build-image
      - deploy-dev:
          requires:
              - test-and-build-image
          filters:
            branches:
              ignore: master
      - deploy-prod:
          requires:
              - test-and-build-image
          filters:
            branches:
              only: master
      - hermes/deploy:
          name: hermes-deploy-dev
          context: web-hermes-dev
          requires: 
            - deploy-dev        

